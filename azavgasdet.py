'''
Takes hdf5 files generated by Silke's code and fits the Azimuthal average from the CSPAD data to
a Gaussian on a slope. Plots the amplitude of the Gaussian (representative of the diffraction
ring intensity) vs the gas detector. The user can enter how many events to fit and plot.
'''

import matplotlib.pyplot as plt
import numpy as np
from tables import open_file
from scipy.optimize import curve_fit

# define function for Gaussian + linear
def gaussianslope(x, a, mean, std, m, b):
    return (a * np.exp(-((x-mean)/2/std)**2)) + (m*x + b)

# open hdf5 file
dat = open_file('/reg/d/psdm/cxi/cxilr6716/hdf5/smalldata/cxilr6716_Run139.h5').root

totalEvents = dat.DsaCsPad.azav_azav.shape[0]
print('total events: ', totalEvents)

# select number of events to graph
num = int(input('number of events to graph: '))

# ignore qbins that have less than 150 pixels
norm = dat.UserDataCfg.DsaCsPad.azav__azav_norm
start = 0
end = len(norm)
begin = end / 2
for i in range(begin):
  a = begin - i
  b = begin + i
  if (norm[a] < 150) and (a > start):
    start = a
  if (norm[b] < 150) and (b < end):
    end = b

# extract Azimuthal average data for selected run from hdf5 file
azav = dat.DsaCsPad.azav_azav[:num]

# extract gas detector data for selected run from hdf5 file
gas_det = dat.gas_detector.f_11_ENRC[:num]

CSPAD_dat = []
for i in range(num):
  # extract Azimuthal average data for selected event
  event = azav[i][0][start+1:end]
  x = np.arange(len(event))

  # estimate mean & standard deviation for Gaussian
  n = len(x)
  mean = sum(x*event) / sum(event)
  std = np.sqrt(sum((x-mean)**2) / n)

  # estimate slope for linear baseline
  x0 = 50 / 2
  l = len(event)
  x1 = l - (50/2)
  y0 = np.mean(event[0:50])
  y1 = np.mean(event[l-50:])
  
  try:
    m, b = np.polyfit((x0, x1), (y0, y1), 1)

    # fit Gaussian + linear to Azimuthal average data; provide initial parameters
    popt, pcov = curve_fit(gaussianslope, x, event, p0=[max(event), mean, std, m, b])
  except Exception:
    CSPAD_dat.append(0)
    continue
  
  CSPAD_dat.append(popt[0])
  if (popt[0] < 0) or (popt[0] > 100):
    print(i, popt[0], gas_det[i])

plt.plot(CSPAD_dat, gas_det, 'ro')
plt.show()
